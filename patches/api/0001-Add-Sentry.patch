From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kevin Raneri <kevin.raneri@gmail.com>
Date: Tue, 9 Nov 2021 14:01:56 -0500
Subject: [PATCH] Add Sentry


diff --git a/build.gradle.kts b/build.gradle.kts
index cad12a2632b9ebb569280441c42869685db1f31a..48d254cd1ee3dc13846ce283cdae5938865607fd 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -42,6 +42,7 @@ dependencies {
     apiAndDocs("net.kyori:adventure-text-logger-slf4j")
     api("org.apache.logging.log4j:log4j-api:2.17.1")
     api("org.slf4j:slf4j-api:1.8.0-beta4")
+    api("io.sentry:sentry:5.4.0") // Pufferfish
 
     implementation("org.ow2.asm:asm:9.4")
     implementation("org.ow2.asm:asm-commons:9.4")
diff --git a/src/main/java/gg/pufferfish/pufferfish/sentry/SentryContext.java b/src/main/java/gg/pufferfish/pufferfish/sentry/SentryContext.java
new file mode 100644
index 0000000000000000000000000000000000000000..10310fdd53de28efb8a8250f6d3b0c8eb08fb68a
--- /dev/null
+++ b/src/main/java/gg/pufferfish/pufferfish/sentry/SentryContext.java
@@ -0,0 +1,161 @@
+package gg.pufferfish.pufferfish.sentry;
+
+import com.google.gson.Gson;
+import java.lang.reflect.Field;
+import java.lang.reflect.Modifier;
+import java.util.Map;
+import java.util.TreeMap;
+import org.apache.logging.log4j.ThreadContext;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Event;
+import org.bukkit.event.player.PlayerEvent;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.plugin.RegisteredListener;
+import org.jetbrains.annotations.Nullable;
+
+public class SentryContext {
+	
+	private static final Gson GSON = new Gson();
+	
+	public static void setPluginContext(@Nullable Plugin plugin) {
+		if (plugin != null) {
+			ThreadContext.put("pufferfishsentry_pluginname", plugin.getName());
+			ThreadContext.put("pufferfishsentry_pluginversion", plugin.getDescription().getVersion());
+		}
+	}
+	
+	public static void removePluginContext() {
+		ThreadContext.remove("pufferfishsentry_pluginname");
+		ThreadContext.remove("pufferfishsentry_pluginversion");
+	}
+	
+	public static void setSenderContext(@Nullable CommandSender sender) {
+		if (sender != null) {
+			ThreadContext.put("pufferfishsentry_playername", sender.getName());
+			if (sender instanceof Player player) {
+				ThreadContext.put("pufferfishsentry_playerid", player.getUniqueId().toString());
+			}
+		}
+	}
+	
+	public static void removeSenderContext() {
+		ThreadContext.remove("pufferfishsentry_playername");
+		ThreadContext.remove("pufferfishsentry_playerid");
+	}
+	
+	public static void setEventContext(Event event, RegisteredListener registration) {
+		setPluginContext(registration.getPlugin());
+		
+		try {
+			// Find the player that was involved with this event
+			Player player = null;
+			if (event instanceof PlayerEvent) {
+				player = ((PlayerEvent) event).getPlayer();
+			} else {
+				Class<? extends Event> eventClass = event.getClass();
+				
+				Field playerField = null;
+				
+				for (Field field : eventClass.getDeclaredFields()) {
+					if (field.getType().equals(Player.class)) {
+						playerField = field;
+						break;
+					}
+				}
+				
+				if (playerField != null) {
+					playerField.setAccessible(true);
+					player = (Player) playerField.get(event);
+				}
+			}
+			
+			if (player != null) {
+				setSenderContext(player);
+			}
+		} catch (Exception e) {} // We can't really safely log exceptions.
+		
+		ThreadContext.put("pufferfishsentry_eventdata", GSON.toJson(serializeFields(event)));
+	}
+	
+	public static void removeEventContext() {
+		removePluginContext();
+		removeSenderContext();
+		ThreadContext.remove("pufferfishsentry_eventdata");
+	}
+	
+	private static Map<String, String> serializeFields(Object object) {
+		Map<String, String> fields = new TreeMap<>();
+		fields.put("_class", object.getClass().getName());
+		for (Field declaredField : object.getClass().getDeclaredFields()) {
+			try {
+				if (Modifier.isStatic(declaredField.getModifiers())) {
+					continue;
+				}
+				
+				String fieldName = declaredField.getName();
+				if (fieldName.equals("handlers")) {
+					continue;
+				}
+				declaredField.setAccessible(true);
+				Object value = declaredField.get(object);
+				if (value != null) {
+					fields.put(fieldName, value.toString());
+				} else {
+					fields.put(fieldName, "<null>");
+				}
+			} catch (Exception e) {} // We can't really safely log exceptions.
+		}
+		return fields;
+	}
+	
+	public static class State {
+		
+		private Plugin plugin;
+		private Command command;
+		private String commandLine;
+		private Event event;
+		private RegisteredListener registeredListener;
+		
+		public Plugin getPlugin() {
+			return plugin;
+		}
+		
+		public void setPlugin(Plugin plugin) {
+			this.plugin = plugin;
+		}
+		
+		public Command getCommand() {
+			return command;
+		}
+		
+		public void setCommand(Command command) {
+			this.command = command;
+		}
+		
+		public String getCommandLine() {
+			return commandLine;
+		}
+		
+		public void setCommandLine(String commandLine) {
+			this.commandLine = commandLine;
+		}
+		
+		public Event getEvent() {
+			return event;
+		}
+		
+		public void setEvent(Event event) {
+			this.event = event;
+		}
+		
+		public RegisteredListener getRegisteredListener() {
+			return registeredListener;
+		}
+		
+		public void setRegisteredListener(RegisteredListener registeredListener) {
+			this.registeredListener = registeredListener;
+		}
+	}
+}
diff --git a/src/main/java/org/bukkit/command/PluginCommand.java b/src/main/java/org/bukkit/command/PluginCommand.java
index 551c5af6a7bfa2268cbc63be8e70d129bccaa912..610c89d50b7f29e5f6ffce75feaa92a6a484f79b 100644
--- a/src/main/java/org/bukkit/command/PluginCommand.java
+++ b/src/main/java/org/bukkit/command/PluginCommand.java
@@ -32,12 +32,14 @@ public final class PluginCommand extends Command implements PluginIdentifiableCo
     @Override
     public boolean execute(@NotNull CommandSender sender, @NotNull String commandLabel, @NotNull String[] args) {
         boolean success = false;
+        gg.pufferfish.pufferfish.sentry.SentryContext.setPluginContext(owningPlugin); // Pufferfish
 
         if (!owningPlugin.isEnabled()) {
             throw new CommandException("Cannot execute command '" + commandLabel + "' in plugin " + owningPlugin.getDescription().getFullName() + " - plugin is disabled.");
         }
 
         if (!testPermission(sender)) {
+            gg.pufferfish.pufferfish.sentry.SentryContext.removePluginContext(); // Pufferfish
             return true;
         }
 
@@ -53,6 +55,7 @@ public final class PluginCommand extends Command implements PluginIdentifiableCo
             }
         }
 
+        gg.pufferfish.pufferfish.sentry.SentryContext.removePluginContext(); // Pufferfish
         return success;
     }
 
@@ -132,6 +135,7 @@ public final class PluginCommand extends Command implements PluginIdentifiableCo
         Preconditions.checkArgument(args != null, "Arguments cannot be null");
         Preconditions.checkArgument(alias != null, "Alias cannot be null");
 
+        gg.pufferfish.pufferfish.sentry.SentryContext.setPluginContext(owningPlugin); // Pufferfish
         List<String> completions = null;
         try {
             if (completer != null) {
@@ -150,6 +154,7 @@ public final class PluginCommand extends Command implements PluginIdentifiableCo
             throw new CommandException(message.toString(), ex);
         }
 
+        gg.pufferfish.pufferfish.sentry.SentryContext.removePluginContext(); // Pufferfish
         if (completions == null) {
             return super.tabComplete(sender, alias, args);
         }
diff --git a/src/main/java/org/bukkit/plugin/SimplePluginManager.java b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
index 2b8308989fce7f8a16907f8711b362e671fdbfb6..bd4d1a40f53784662174d426533ef4b5433a15b7 100644
--- a/src/main/java/org/bukkit/plugin/SimplePluginManager.java
+++ b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
@@ -584,7 +584,9 @@ public final class SimplePluginManager implements PluginManager {
 
     // Paper start
     private void handlePluginException(String msg, Throwable ex, Plugin plugin) {
+        gg.pufferfish.pufferfish.sentry.SentryContext.setPluginContext(plugin); // Pufferfish
         server.getLogger().log(Level.SEVERE, msg, ex);
+        gg.pufferfish.pufferfish.sentry.SentryContext.removePluginContext(); // Pufferfish
         callEvent(new com.destroystokyo.paper.event.server.ServerExceptionEvent(new com.destroystokyo.paper.exception.ServerPluginEnableDisableException(msg, ex, plugin)));
     }
     // Paper end
@@ -654,9 +656,11 @@ public final class SimplePluginManager implements PluginManager {
                             ));
                 }
             } catch (Throwable ex) {
+                gg.pufferfish.pufferfish.sentry.SentryContext.setEventContext(event, registration); // Pufferfish
                 // Paper start - error reporting
                 String msg = "Could not pass event " + event.getEventName() + " to " + registration.getPlugin().getDescription().getFullName();
                 server.getLogger().log(Level.SEVERE, msg, ex);
+                gg.pufferfish.pufferfish.sentry.SentryContext.removeEventContext(); // Pufferfish
                 if (!(event instanceof com.destroystokyo.paper.event.server.ServerExceptionEvent)) { // We don't want to cause an endless event loop
                     callEvent(new com.destroystokyo.paper.event.server.ServerExceptionEvent(new com.destroystokyo.paper.exception.ServerEventException(msg, ex, registration.getPlugin(), registration.getListener(), event)));
                 }
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
index eaefbb00e9993d54906cc8cf35cf753c0d6c7707..301e82369603f3dd6e6c1bd380da4bacacd7ef6c 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
@@ -336,7 +336,13 @@ public final class JavaPluginLoader implements PluginLoader {
             try {
                 jPlugin.setEnabled(true);
             } catch (Throwable ex) {
+                gg.pufferfish.pufferfish.sentry.SentryContext.setPluginContext(plugin); // Pufferfish
                 server.getLogger().log(Level.SEVERE, "Error occurred while enabling " + plugin.getDescription().getFullName() + " (Is it up to date?)", ex);
+                gg.pufferfish.pufferfish.sentry.SentryContext.removePluginContext(); // Pufferfish
+                // Paper start - Disable plugins that fail to load
+                this.server.getPluginManager().disablePlugin(jPlugin);
+                return;
+                // Paper end
             }
 
             // Perhaps abort here, rather than continue going, but as it stands,
@@ -361,7 +367,9 @@ public final class JavaPluginLoader implements PluginLoader {
             try {
                 jPlugin.setEnabled(false);
             } catch (Throwable ex) {
+                gg.pufferfish.pufferfish.sentry.SentryContext.setPluginContext(plugin); // Pufferfish
                 server.getLogger().log(Level.SEVERE, "Error occurred while disabling " + plugin.getDescription().getFullName() + " (Is it up to date?)", ex);
+                gg.pufferfish.pufferfish.sentry.SentryContext.removePluginContext(); // Pufferfish
             }
 
             if (cloader instanceof PluginClassLoader) {
