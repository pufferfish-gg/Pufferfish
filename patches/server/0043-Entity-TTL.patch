From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kevin Raneri <kevin.raneri@gmail.com>
Date: Thu, 2 Jun 2022 19:54:09 -0500
Subject: [PATCH] Entity TTL


diff --git a/src/main/java/gg/pufferfish/pufferfish/PufferfishConfig.java b/src/main/java/gg/pufferfish/pufferfish/PufferfishConfig.java
index d2a55d57ee98c6690b96cd4e58c9dbbff2bb8d3d..a3840c3a99e50af16d0f120ffb82f57f8d54a38a 100644
--- a/src/main/java/gg/pufferfish/pufferfish/PufferfishConfig.java
+++ b/src/main/java/gg/pufferfish/pufferfish/PufferfishConfig.java
@@ -4,7 +4,10 @@ import gg.pufferfish.pufferfish.simd.SIMDDetection;
 import java.io.File;
 import java.io.IOException;
 import java.util.Collections;
+import java.util.Locale;
+import java.util.Map;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.tags.TagKey;
 import org.apache.logging.log4j.Level;
 import org.bukkit.configuration.ConfigurationSection;
 import net.minecraft.core.registries.BuiltInRegistries;
@@ -252,6 +255,23 @@ public class PufferfishConfig {
         setComment("dab", "Optimizes entity brains when", "they're far away from the player");
     }
     
+    public static Map<String, Integer> projectileTimeouts;
+    private static void projectileTimeouts() {
+         // Set some defaults
+         getInt("entity_timeouts.SNOWBALL", -1);
+         getInt("entity_timeouts.LLAMA_SPIT", -1);
+         setComment("entity_timeouts",
+                   "These values define a entity's maximum lifespan. If an",
+                   "entity is in this list and it has survived for longer than",
+                   "that number of ticks, then it will be removed. Setting a value to",
+                   "-1 disables this feature.");
+         
+         for (EntityType<?> entityType : BuiltInRegistries.ENTITY_TYPE) {
+              String type = EntityType.getKey(entityType).getPath().toUpperCase(Locale.ROOT);
+              entityType.ttl = config.getInt("entity_timeouts." + type, -1);
+         }
+    }
+    
     public static boolean throttleInactiveGoalSelectorTick;
 	private static void inactiveGoalSelectorThrottle() {
 		getBoolean("inactive-goal-selector-throttle", "inactive-goal-selector-disable", true,
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 4ed95fcb97845549a063a4ac77204119aa0ec244..ef98bdee8e590844fdaec7fb58c79e3d6fb1ccd4 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -815,6 +815,11 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     // CraftBukkit end
 
     public void baseTick() {
+        // Pufferfish start - entity TTL
+        if (type != EntityType.PLAYER && type.ttl >= 0 && this.tickCount >= type.ttl) {
+            remove(RemovalReason.DISCARDED);
+            return;
+        }
         this.level.getProfiler().push("entityBaseTick");
         if (firstTick && this instanceof net.minecraft.world.entity.NeutralMob neutralMob) neutralMob.tickInitialPersistentAnger(level); // Paper - Update last hurt when ticking
         this.feetBlockState = null;
diff --git a/src/main/java/net/minecraft/world/entity/EntityType.java b/src/main/java/net/minecraft/world/entity/EntityType.java
index b31e3ead35581d9b404bce141ab9d07debe4d435..4897af95cd5b160d785029295306aacb12f5b231 100644
--- a/src/main/java/net/minecraft/world/entity/EntityType.java
+++ b/src/main/java/net/minecraft/world/entity/EntityType.java
@@ -315,6 +315,7 @@ public class EntityType<T extends Entity> implements FeatureElement, EntityTypeT
     }
 
     public boolean dabEnabled = false; // Pufferfish
+    public int ttl = -1; // Pufferfish
     public EntityType(EntityType.EntityFactory<T> factory, MobCategory spawnGroup, boolean saveable, boolean summonable, boolean fireImmune, boolean spawnableFarFromPlayer, ImmutableSet<Block> canSpawnInside, EntityDimensions dimensions, int maxTrackDistance, int trackTickInterval, FeatureFlagSet requiredFeatures) {
        // Paper start
         this(factory, spawnGroup, saveable, summonable, fireImmune, spawnableFarFromPlayer, canSpawnInside, dimensions, maxTrackDistance, trackTickInterval, requiredFeatures, "custom");
